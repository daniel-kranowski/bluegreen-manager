bluegreen.datasource.discovery.url=jdbc:mysql://my-bluegreen-database.example.com:3306/mydb1
bluegreen.datasource.discovery.username=dbAdmin
bluegreen.datasource.discovery.password=thesecretPassword

bluegreen.aws.access.key.id=FILL-ME-IN
bluegreen.aws.secret.access.key=longerPileOfGibberish-Fill-Me-In
bluegreen.aws.region=US_WEST_2

# 10sec delays -> report every 30sec, timeout at 20min
bluegreen.waiter.rdsSnapshotRestoreTask.initialWaitDelayMilliseconds=10000
bluegreen.waiter.rdsSnapshotRestoreTask.followupWaitDelayMilliseconds=10000
bluegreen.waiter.rdsSnapshotRestoreTask.waitReportInterval=3
bluegreen.waiter.rdsSnapshotRestoreTask.maxNumWaits=120

# 10sec delays -> report every 30sec, timeout at 10min
bluegreen.waiter.rdsInstanceDeleteTask.initialWaitDelayMilliseconds=10000
bluegreen.waiter.rdsInstanceDeleteTask.followupWaitDelayMilliseconds=10000
bluegreen.waiter.rdsInstanceDeleteTask.waitReportInterval=3
bluegreen.waiter.rdsInstanceDeleteTask.maxNumWaits=60

# 5min initial delay, 30sec followup delays -> report followups every 2min, timeout at 1hr + 4.5 min
bluegreen.waiter.sshVmCreateTask.initialWaitDelayMilliseconds=300000
bluegreen.waiter.sshVmCreateTask.followupWaitDelayMilliseconds=30000
bluegreen.waiter.sshVmCreateTask.waitReportInterval=4
bluegreen.waiter.sshVmCreateTask.maxNumWaits=120

# 3sec delays -> report every 30sec, timeout at 10min
bluegreen.waiter.transitionTask.initialWaitDelayMilliseconds=3000
bluegreen.waiter.transitionTask.followupWaitDelayMilliseconds=3000
bluegreen.waiter.transitionTask.waitReportInterval=10
bluegreen.waiter.transitionTask.maxNumWaits=200

# 10sec delays -> report every 30sec, timeout at 5min
bluegreen.waiter.fixedELBFlipEC2Task.initialWaitDelayMilliseconds=10000
bluegreen.waiter.fixedELBFlipEC2Task.followupWaitDelayMilliseconds=10000
bluegreen.waiter.fixedELBFlipEC2Task.waitReportInterval=3
bluegreen.waiter.fixedELBFlipEC2Task.maxNumWaits=30

bluegreen.sshtarget.hostname=my-vm-with-good-stuff.example.com
bluegreen.sshtarget.username=anotherUser
bluegreen.sshtarget.password=anotherPassword
bluegreen.sshtarget.soTimeoutMilliseconds=600000
bluegreen.sshtarget.keyExchangeTimeoutMilliseconds=5000

#These are fake commands...fill in your real stuff here

bluegreen.sshvmcreate.initial.command=echo You could specify a commmand like: spinUpMyVm.sh --arg1 "%{envName}" --arg2 %{envName}
bluegreen.sshvmcreate.initial.regexp.ipaddress=^Successfully found ip=(.*)
bluegreen.sshvmcreate.initial.regexp.hostname=^Successfully found hostname=(.*)$
bluegreen.sshvmcreate.followup.command=checkMyVm --host %{hostname}
bluegreen.sshvmcreate.followup.regexp.done=^Your VM is READY TO USE
bluegreen.sshvmcreate.followup.regexp.error=^(Error!|no such host)

bluegreen.sshvmdelete.initial.command=spinDownMyVm.sh --arg1 %{vmHostname}
bluegreen.sshvmdelete.initial.regexp.success=^VM was deleted just fine

bluegreen.shellConfig.createStageEnv.command=createMyStageEnv.sh --arg1 %{liveEnv} --arg2 %{stageEnv} --arg3 %{applicationVmMap} --arg4 %{physicalDbMap}
bluegreen.shellConfig.createStageEnv.regexp.error=(Problem: )
bluegreen.shellConfig.createStageEnv.exitvalue.success=0

bluegreen.shellConfig.deployPackages.command=deployMyPackages.sh --arg1 %{liveEnv} --arg2 %{stageEnv} --arg3 %{packages}
bluegreen.shellConfig.deployPackages.exitvalue.success=0

bluegreen.shellConfig.swapDatabases.command=swapTheDatabases.sh --arg1 %{liveEnv} --arg2 %{stageEnv} --arg3 %{packages} --arg4 %{physicalDbMap}
bluegreen.shellConfig.swapDatabases.exitvalue.success=0

bluegreen.shellConfig.shutdownApplications.command=shutdownMyApps.sh --arg1 %{env} --arg2 %{vmHostname} --arg3 %{stopServices}
bluegreen.shellConfig.shutdownApplications.exitvalue.success=0

bluegreen.shellConfig.deleteEnv.command=deleteMyEnv.sh --arg1 %{env}
bluegreen.shellConfig.deleteEnv.regexp.error=Deletion Failed
